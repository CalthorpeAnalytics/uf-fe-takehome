{"version":3,"sources":["Pins.js","CityInfo.js","Map.js","Panel.js","App.js","reportWebVitals.js","index.js"],"names":["Pins","props","data","onClick","map","city","index","longitude","latitude","height","viewBox","style","cursor","fill","stroke","transform","d","React","CityInfo","info","displayName","name","state","target","href","width","src","image","Map","useState","zoom","viewport","setViewport","popupInfo","setPopupInfo","mapStyle","mapboxApiAccessToken","onViewportChange","CITIES","tipSize","anchor","closeOnClick","onClose","Panel","className","type","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0tKAUA,SAASA,EAAKC,GAAQ,IACbC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,QAEb,OAAOD,EAAKE,KAAI,SAACC,EAAMC,GAAP,OACd,cAAC,IAAD,CAAgCC,UAAWF,EAAKE,UAAWC,SAAUH,EAAKG,SAA1E,SACE,qBACEC,OATK,GAULC,QAAQ,YACRC,MAAO,CACLC,OAAQ,UACRC,KAAM,OACNC,OAAQ,OACRC,UAAU,aAAD,QAAe,GAAf,eAfN,GAeM,QAEXZ,QAAS,kBAAMA,EAAQE,IATzB,SAWE,sBAAMW,EAvBJ,+QAWN,iBAAuBV,OAkBZW,aAAWjB,GC9B1B,SAASkB,EAASjB,GAAQ,IACjBkB,EAAQlB,EAARkB,KACDC,EAAW,UAAMD,EAAKE,KAAX,aAAoBF,EAAKG,OAE1C,OACE,gCACE,gCACGF,EADH,KACkB,IAChB,mBACEG,OAAO,OACPC,KAAI,0EAAqEJ,GAF3E,0BAOF,qBAAKK,MAAO,IAAKC,IAAKP,EAAKQ,WAKlBV,aAAWC,G,QCyBVU,MAvChB,WAAgB,IAAD,EAEmBC,mBAAS,CACvCrB,SAAU,QACVD,WAAY,SACZuB,KAAM,IALK,mBAENC,EAFM,KAEIC,EAFJ,OAQqBH,mBAAS,MAR9B,mBAQNI,EARM,KAQKC,EARL,KAUb,OACI,eAAC,IAAD,2BACMH,GADN,IAEEI,SAAS,iCACTV,MAAM,QACNhB,OAAO,QACP2B,qBAlB8B,wGAmB9BC,iBAAkB,SAACN,GAAD,OAAcC,EAAYD,IAN9C,UASA,cAAC,EAAD,CAAM7B,KAAMoC,EAAQnC,QAAS+B,IAE5BD,GAEC,cAAC,IAAD,CACEM,QAAS,EACTC,OAAO,MACPjC,UAAW0B,EAAU1B,UACrBC,SAAUyB,EAAUzB,SACpBiC,cAAc,EACdC,QAASR,EANX,SAQE,cAAC,EAAD,CAAUf,KAAMc,WCtC1B,SAASU,EAAM1C,GAIb,OACE,sBAAK2C,UAAU,QAAf,UAEE,sBAAKA,UAAU,QAAf,UACE,gEACA,uBACEC,KAAK,SACLC,MAVW,QAcf,sBAAKF,UAAU,QAAf,UACE,qDACA,uBACEC,KAAK,SACLC,MAjBS,WAyBJ7B,aAAW0B,G,MCfXI,MATf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1a75656c.chunk.js","sourcesContent":["import * as React from 'react';\nimport {Marker} from 'react-map-gl';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst SIZE = 20;\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nfunction Pins(props) {\n  const {data, onClick} = props;\n\n  return data.map((city, index) => (\n    <Marker key={`marker-${index}`} longitude={city.longitude} latitude={city.latitude}>\n      <svg\n        height={SIZE}\n        viewBox=\"0 0 24 24\"\n        style={{\n          cursor: 'pointer',\n          fill: '#d00',\n          stroke: 'none',\n          transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n        }}\n        onClick={() => onClick(city)}\n      >\n        <path d={ICON} />\n      </svg>\n    </Marker>\n  ));\n}\n\nexport default React.memo(Pins);","import * as React from 'react';\n\nfunction CityInfo(props) {\n  const {info} = props;\n  const displayName = `${info.name}, ${info.state}`;\n\n  return (\n    <div>\n      <div>\n        {displayName} |{' '}\n        <a\n          target=\"_new\"\n          href={`http://en.wikipedia.org/w/index.php?title=Special:Search&search=${displayName}`}\n        >\n          Wikipedia\n        </a>\n      </div>\n      <img width={240} src={info.image} />\n    </div>\n  );\n}\n\nexport default React.memo(CityInfo);","import {useState} from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport Pins from './Pins';\nimport CityInfo from './CityInfo';\nimport CITIES from './cities.json';\n\nconst REACT_APP_MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiYnJhZGxleWJvc3NhcmR1ZiIsImEiOiJja3NoeWR2ODkxemFoMnBwYTM1emhhYmU4In0.etmCrrx1r0vece_U8jvwFw';\n\nfunction Map() {\n\n  const [viewport, setViewport] = useState({\n    latitude: 37.7577,\n    longitude: -102.4376,\n    zoom: 3 \n  });\n\n  const [popupInfo, setPopupInfo] = useState(null);\n\n  return (\n      <ReactMapGL\n        {...viewport}\n        mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n        width=\"100vw\"\n        height=\"100vh\"\n        mapboxApiAccessToken={REACT_APP_MAPBOX_ACCESS_TOKEN}\n        onViewportChange={(viewport) => setViewport(viewport)}\n      >\n\n      <Pins data={CITIES} onClick={setPopupInfo} />\n\n      {popupInfo && (\n\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          longitude={popupInfo.longitude}\n          latitude={popupInfo.latitude}\n          closeOnClick={false}\n          onClose={setPopupInfo}\n        >\n          <CityInfo info={popupInfo} />\n        </Popup>\n      )}\n      </ReactMapGL>\n  );\n }\n\n export default Map;","import * as React from 'react';\n\nfunction Panel(props) {\n  const sideLength = 50;\n  const cityName = '';\n\n  return (\n    <div className=\"panel\">\n\n      <div className=\"input\">\n        <label>Bounding Square Side Length</label>\n        <input\n          type=\"number\"\n          value={sideLength}\n        />\n      </div>\n\n      <div className=\"input\">\n        <label>City Name Filter</label>\n        <input\n          type=\"string\"\n          value={cityName}\n        />\n      </div>\n\n    </div>\n  );\n}\n\nexport default React.memo(Panel);","import 'mapbox-gl/dist/mapbox-gl.css';\nimport Map from './Map';\nimport Panel from './Panel'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n      <Panel />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}